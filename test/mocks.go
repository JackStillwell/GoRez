// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_gorezinternal is a generated GoMock package.
package mock_gorezinternal

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockHTTPGetter is a mock of HTTPGetter interface
type MockHTTPGetter struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPGetterMockRecorder
}

// MockHTTPGetterMockRecorder is the mock recorder for MockHTTPGetter
type MockHTTPGetterMockRecorder struct {
	mock *MockHTTPGetter
}

// NewMockHTTPGetter creates a new mock instance
func NewMockHTTPGetter(ctrl *gomock.Controller) *MockHTTPGetter {
	mock := &MockHTTPGetter{ctrl: ctrl}
	mock.recorder = &MockHTTPGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPGetter) EXPECT() *MockHTTPGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockHTTPGetter) Get(url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockHTTPGetterMockRecorder) Get(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPGetter)(nil).Get), url)
}

// MockRequestManagement is a mock of RequestManagement interface
type MockRequestManagement struct {
	ctrl     *gomock.Controller
	recorder *MockRequestManagementMockRecorder
}

// MockRequestManagementMockRecorder is the mock recorder for MockRequestManagement
type MockRequestManagementMockRecorder struct {
	mock *MockRequestManagement
}

// NewMockRequestManagement creates a new mock instance
func NewMockRequestManagement(ctrl *gomock.Controller) *MockRequestManagement {
	mock := &MockRequestManagement{ctrl: ctrl}
	mock.recorder = &MockRequestManagementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestManagement) EXPECT() *MockRequestManagementMockRecorder {
	return m.recorder
}

// getSignature mocks base method
func (m *MockRequestManagement) getSignature(endpoint, timestamp string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSignature", endpoint, timestamp)
	ret0, _ := ret[0].(string)
	return ret0
}

// getSignature indicates an expected call of getSignature
func (mr *MockRequestManagementMockRecorder) getSignature(endpoint, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSignature", reflect.TypeOf((*MockRequestManagement)(nil).getSignature), endpoint, timestamp)
}

// getTimestamp mocks base method
func (m *MockRequestManagement) getTimestamp(currTime time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTimestamp", currTime)
	ret0, _ := ret[0].(string)
	return ret0
}

// getTimestamp indicates an expected call of getTimestamp
func (mr *MockRequestManagementMockRecorder) getTimestamp(currTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTimestamp", reflect.TypeOf((*MockRequestManagement)(nil).getTimestamp), currTime)
}

// EndpointRequest mocks base method
func (m *MockRequestManagement) EndpointRequest(endpoint, sessionID, args string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointRequest", endpoint, sessionID, args)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointRequest indicates an expected call of EndpointRequest
func (mr *MockRequestManagementMockRecorder) EndpointRequest(endpoint, sessionID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointRequest", reflect.TypeOf((*MockRequestManagement)(nil).EndpointRequest), endpoint, sessionID, args)
}

// CreateSessionRequest mocks base method
func (m *MockRequestManagement) CreateSessionRequest() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionRequest")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSessionRequest indicates an expected call of CreateSessionRequest
func (mr *MockRequestManagementMockRecorder) CreateSessionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionRequest", reflect.TypeOf((*MockRequestManagement)(nil).CreateSessionRequest))
}

// MockSessionManagement is a mock of SessionManagement interface
type MockSessionManagement struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagementMockRecorder
}

// MockSessionManagementMockRecorder is the mock recorder for MockSessionManagement
type MockSessionManagementMockRecorder struct {
	mock *MockSessionManagement
}

// NewMockSessionManagement creates a new mock instance
func NewMockSessionManagement(ctrl *gomock.Controller) *MockSessionManagement {
	mock := &MockSessionManagement{ctrl: ctrl}
	mock.recorder = &MockSessionManagementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionManagement) EXPECT() *MockSessionManagementMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockSessionManagement) Initialize(initFile string, rm MockRequestManagement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Initialize", initFile, rm)
}

// Initialize indicates an expected call of Initialize
func (mr *MockSessionManagementMockRecorder) Initialize(initFile, rm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockSessionManagement)(nil).Initialize), initFile, rm)
}

// Save mocks base method
func (m *MockSessionManagement) Save(saveFile string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", saveFile)
}

// Save indicates an expected call of Save
func (mr *MockSessionManagementMockRecorder) Save(saveFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSessionManagement)(nil).Save), saveFile)
}

// GetSession mocks base method
func (m *MockSessionManagement) GetSession() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession
func (mr *MockSessionManagementMockRecorder) GetSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionManagement)(nil).GetSession))
}

// ReturnSession mocks base method
func (m *MockSessionManagement) ReturnSession(sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnSession", sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnSession indicates an expected call of ReturnSession
func (mr *MockSessionManagementMockRecorder) ReturnSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnSession", reflect.TypeOf((*MockSessionManagement)(nil).ReturnSession), sessionID)
}
