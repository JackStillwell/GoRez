// Code generated by MockGen. DO NOT EDIT.
// Source: gorez.go

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/JackStillwell/GoRez/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGoRez is a mock of GoRez interface
type MockGoRez struct {
	ctrl     *gomock.Controller
	recorder *MockGoRezMockRecorder
}

// MockGoRezMockRecorder is the mock recorder for MockGoRez
type MockGoRezMockRecorder struct {
	mock *MockGoRez
}

// NewMockGoRez creates a new mock instance
func NewMockGoRez(ctrl *gomock.Controller) *MockGoRez {
	mock := &MockGoRez{ctrl: ctrl}
	mock.recorder = &MockGoRezMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGoRez) EXPECT() *MockGoRezMockRecorder {
	return m.recorder
}

// GetGods mocks base method
func (m *MockGoRez) GetGods() []*models.God {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGods")
	ret0, _ := ret[0].([]*models.God)
	return ret0
}

// GetGods indicates an expected call of GetGods
func (mr *MockGoRezMockRecorder) GetGods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGods", reflect.TypeOf((*MockGoRez)(nil).GetGods))
}

// GetItems mocks base method
func (m *MockGoRez) GetItems() []*models.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems")
	ret0, _ := ret[0].([]*models.Item)
	return ret0
}

// GetItems indicates an expected call of GetItems
func (mr *MockGoRezMockRecorder) GetItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockGoRez)(nil).GetItems))
}

// GetGodRecItems mocks base method
func (m *MockGoRez) GetGodRecItems(godID int) []*models.ItemRecommendation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGodRecItems", godID)
	ret0, _ := ret[0].([]*models.ItemRecommendation)
	return ret0
}

// GetGodRecItems indicates an expected call of GetGodRecItems
func (mr *MockGoRezMockRecorder) GetGodRecItems(godID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGodRecItems", reflect.TypeOf((*MockGoRez)(nil).GetGodRecItems), godID)
}

// GetPlayerIDByName mocks base method
func (m *MockGoRez) GetPlayerIDByName(playerName string) *models.PlayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerIDByName", playerName)
	ret0, _ := ret[0].(*models.PlayerID)
	return ret0
}

// GetPlayerIDByName indicates an expected call of GetPlayerIDByName
func (mr *MockGoRezMockRecorder) GetPlayerIDByName(playerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerIDByName", reflect.TypeOf((*MockGoRez)(nil).GetPlayerIDByName), playerName)
}

// GetPlayer mocks base method
func (m *MockGoRez) GetPlayer(playerID int) *models.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", playerID)
	ret0, _ := ret[0].(*models.Player)
	return ret0
}

// GetPlayer indicates an expected call of GetPlayer
func (mr *MockGoRezMockRecorder) GetPlayer(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockGoRez)(nil).GetPlayer), playerID)
}

// GetPlayerBatch mocks base method
func (m *MockGoRez) GetPlayerBatch(playerIDs []int) []*models.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerBatch", playerIDs)
	ret0, _ := ret[0].([]*models.Player)
	return ret0
}

// GetPlayerBatch indicates an expected call of GetPlayerBatch
func (mr *MockGoRezMockRecorder) GetPlayerBatch(playerIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerBatch", reflect.TypeOf((*MockGoRez)(nil).GetPlayerBatch), playerIDs)
}

// GetMatchHistory mocks base method
func (m *MockGoRez) GetMatchHistory(playerID int) []*models.MatchDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchHistory", playerID)
	ret0, _ := ret[0].([]*models.MatchDetails)
	return ret0
}

// GetMatchHistory indicates an expected call of GetMatchHistory
func (mr *MockGoRezMockRecorder) GetMatchHistory(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchHistory", reflect.TypeOf((*MockGoRez)(nil).GetMatchHistory), playerID)
}

// GetQueueStats mocks base method
func (m *MockGoRez) GetQueueStats(playerID int) []*models.QueueStat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueStats", playerID)
	ret0, _ := ret[0].([]*models.QueueStat)
	return ret0
}

// GetQueueStats indicates an expected call of GetQueueStats
func (mr *MockGoRezMockRecorder) GetQueueStats(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueStats", reflect.TypeOf((*MockGoRez)(nil).GetQueueStats), playerID)
}

// GetMatchDetails mocks base method
func (m *MockGoRez) GetMatchDetails(matchID int) *models.MatchDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchDetails", matchID)
	ret0, _ := ret[0].(*models.MatchDetails)
	return ret0
}

// GetMatchDetails indicates an expected call of GetMatchDetails
func (mr *MockGoRezMockRecorder) GetMatchDetails(matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchDetails", reflect.TypeOf((*MockGoRez)(nil).GetMatchDetails), matchID)
}

// GetMatchDetailsBatch mocks base method
func (m *MockGoRez) GetMatchDetailsBatch(matchIDs []int) []*models.MatchDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchDetailsBatch", matchIDs)
	ret0, _ := ret[0].([]*models.MatchDetails)
	return ret0
}

// GetMatchDetailsBatch indicates an expected call of GetMatchDetailsBatch
func (mr *MockGoRezMockRecorder) GetMatchDetailsBatch(matchIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchDetailsBatch", reflect.TypeOf((*MockGoRez)(nil).GetMatchDetailsBatch), matchIDs)
}

// GetMatchIDsByQueue mocks base method
func (m *MockGoRez) GetMatchIDsByQueue(queueID models.QueueID) []*models.MatchID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchIDsByQueue", queueID)
	ret0, _ := ret[0].([]*models.MatchID)
	return ret0
}

// GetMatchIDsByQueue indicates an expected call of GetMatchIDsByQueue
func (mr *MockGoRezMockRecorder) GetMatchIDsByQueue(queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchIDsByQueue", reflect.TypeOf((*MockGoRez)(nil).GetMatchIDsByQueue), queueID)
}

// GetMatchPlayerDetails mocks base method
func (m *MockGoRez) GetMatchPlayerDetails(matchID int) *models.MatchDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchPlayerDetails", matchID)
	ret0, _ := ret[0].(*models.MatchDetails)
	return ret0
}

// GetMatchPlayerDetails indicates an expected call of GetMatchPlayerDetails
func (mr *MockGoRezMockRecorder) GetMatchPlayerDetails(matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchPlayerDetails", reflect.TypeOf((*MockGoRez)(nil).GetMatchPlayerDetails), matchID)
}

// MockAPIUtil is a mock of APIUtil interface
type MockAPIUtil struct {
	ctrl     *gomock.Controller
	recorder *MockAPIUtilMockRecorder
}

// MockAPIUtilMockRecorder is the mock recorder for MockAPIUtil
type MockAPIUtilMockRecorder struct {
	mock *MockAPIUtil
}

// NewMockAPIUtil creates a new mock instance
func NewMockAPIUtil(ctrl *gomock.Controller) *MockAPIUtil {
	mock := &MockAPIUtil{ctrl: ctrl}
	mock.recorder = &MockAPIUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIUtil) EXPECT() *MockAPIUtilMockRecorder {
	return m.recorder
}

// CreateSession mocks base method
func (m *MockAPIUtil) CreateSession(arg0 int) ([]*models.Session, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0)
	ret0, _ := ret[0].([]*models.Session)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockAPIUtilMockRecorder) CreateSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAPIUtil)(nil).CreateSession), arg0)
}

// TestSession mocks base method
func (m *MockAPIUtil) TestSession(arg0 []*models.Session) ([]*string, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestSession", arg0)
	ret0, _ := ret[0].([]*string)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// TestSession indicates an expected call of TestSession
func (mr *MockAPIUtilMockRecorder) TestSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestSession", reflect.TypeOf((*MockAPIUtil)(nil).TestSession), arg0)
}

// GetDataUsed mocks base method
func (m *MockAPIUtil) GetDataUsed() (*models.UsageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataUsed")
	ret0, _ := ret[0].(*models.UsageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataUsed indicates an expected call of GetDataUsed
func (mr *MockAPIUtilMockRecorder) GetDataUsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataUsed", reflect.TypeOf((*MockAPIUtil)(nil).GetDataUsed))
}

// MockGodItemInfo is a mock of GodItemInfo interface
type MockGodItemInfo struct {
	ctrl     *gomock.Controller
	recorder *MockGodItemInfoMockRecorder
}

// MockGodItemInfoMockRecorder is the mock recorder for MockGodItemInfo
type MockGodItemInfoMockRecorder struct {
	mock *MockGodItemInfo
}

// NewMockGodItemInfo creates a new mock instance
func NewMockGodItemInfo(ctrl *gomock.Controller) *MockGodItemInfo {
	mock := &MockGodItemInfo{ctrl: ctrl}
	mock.recorder = &MockGodItemInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGodItemInfo) EXPECT() *MockGodItemInfoMockRecorder {
	return m.recorder
}

// GetGods mocks base method
func (m *MockGodItemInfo) GetGods() []*models.God {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGods")
	ret0, _ := ret[0].([]*models.God)
	return ret0
}

// GetGods indicates an expected call of GetGods
func (mr *MockGodItemInfoMockRecorder) GetGods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGods", reflect.TypeOf((*MockGodItemInfo)(nil).GetGods))
}

// GetItems mocks base method
func (m *MockGodItemInfo) GetItems() []*models.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems")
	ret0, _ := ret[0].([]*models.Item)
	return ret0
}

// GetItems indicates an expected call of GetItems
func (mr *MockGodItemInfoMockRecorder) GetItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockGodItemInfo)(nil).GetItems))
}

// GetGodRecItems mocks base method
func (m *MockGodItemInfo) GetGodRecItems(godID int) []*models.ItemRecommendation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGodRecItems", godID)
	ret0, _ := ret[0].([]*models.ItemRecommendation)
	return ret0
}

// GetGodRecItems indicates an expected call of GetGodRecItems
func (mr *MockGodItemInfoMockRecorder) GetGodRecItems(godID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGodRecItems", reflect.TypeOf((*MockGodItemInfo)(nil).GetGodRecItems), godID)
}

// MockPlayerInfo is a mock of PlayerInfo interface
type MockPlayerInfo struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerInfoMockRecorder
}

// MockPlayerInfoMockRecorder is the mock recorder for MockPlayerInfo
type MockPlayerInfoMockRecorder struct {
	mock *MockPlayerInfo
}

// NewMockPlayerInfo creates a new mock instance
func NewMockPlayerInfo(ctrl *gomock.Controller) *MockPlayerInfo {
	mock := &MockPlayerInfo{ctrl: ctrl}
	mock.recorder = &MockPlayerInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlayerInfo) EXPECT() *MockPlayerInfoMockRecorder {
	return m.recorder
}

// GetPlayerIDByName mocks base method
func (m *MockPlayerInfo) GetPlayerIDByName(playerName string) *models.PlayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerIDByName", playerName)
	ret0, _ := ret[0].(*models.PlayerID)
	return ret0
}

// GetPlayerIDByName indicates an expected call of GetPlayerIDByName
func (mr *MockPlayerInfoMockRecorder) GetPlayerIDByName(playerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerIDByName", reflect.TypeOf((*MockPlayerInfo)(nil).GetPlayerIDByName), playerName)
}

// GetPlayer mocks base method
func (m *MockPlayerInfo) GetPlayer(playerID int) *models.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", playerID)
	ret0, _ := ret[0].(*models.Player)
	return ret0
}

// GetPlayer indicates an expected call of GetPlayer
func (mr *MockPlayerInfoMockRecorder) GetPlayer(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockPlayerInfo)(nil).GetPlayer), playerID)
}

// GetPlayerBatch mocks base method
func (m *MockPlayerInfo) GetPlayerBatch(playerIDs []int) []*models.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerBatch", playerIDs)
	ret0, _ := ret[0].([]*models.Player)
	return ret0
}

// GetPlayerBatch indicates an expected call of GetPlayerBatch
func (mr *MockPlayerInfoMockRecorder) GetPlayerBatch(playerIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerBatch", reflect.TypeOf((*MockPlayerInfo)(nil).GetPlayerBatch), playerIDs)
}

// GetMatchHistory mocks base method
func (m *MockPlayerInfo) GetMatchHistory(playerID int) []*models.MatchDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchHistory", playerID)
	ret0, _ := ret[0].([]*models.MatchDetails)
	return ret0
}

// GetMatchHistory indicates an expected call of GetMatchHistory
func (mr *MockPlayerInfoMockRecorder) GetMatchHistory(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchHistory", reflect.TypeOf((*MockPlayerInfo)(nil).GetMatchHistory), playerID)
}

// GetQueueStats mocks base method
func (m *MockPlayerInfo) GetQueueStats(playerID int) []*models.QueueStat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueStats", playerID)
	ret0, _ := ret[0].([]*models.QueueStat)
	return ret0
}

// GetQueueStats indicates an expected call of GetQueueStats
func (mr *MockPlayerInfoMockRecorder) GetQueueStats(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueStats", reflect.TypeOf((*MockPlayerInfo)(nil).GetQueueStats), playerID)
}

// MockMatchInfo is a mock of MatchInfo interface
type MockMatchInfo struct {
	ctrl     *gomock.Controller
	recorder *MockMatchInfoMockRecorder
}

// MockMatchInfoMockRecorder is the mock recorder for MockMatchInfo
type MockMatchInfoMockRecorder struct {
	mock *MockMatchInfo
}

// NewMockMatchInfo creates a new mock instance
func NewMockMatchInfo(ctrl *gomock.Controller) *MockMatchInfo {
	mock := &MockMatchInfo{ctrl: ctrl}
	mock.recorder = &MockMatchInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchInfo) EXPECT() *MockMatchInfoMockRecorder {
	return m.recorder
}

// GetMatchDetails mocks base method
func (m *MockMatchInfo) GetMatchDetails(matchID int) *models.MatchDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchDetails", matchID)
	ret0, _ := ret[0].(*models.MatchDetails)
	return ret0
}

// GetMatchDetails indicates an expected call of GetMatchDetails
func (mr *MockMatchInfoMockRecorder) GetMatchDetails(matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchDetails", reflect.TypeOf((*MockMatchInfo)(nil).GetMatchDetails), matchID)
}

// GetMatchDetailsBatch mocks base method
func (m *MockMatchInfo) GetMatchDetailsBatch(matchIDs []int) []*models.MatchDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchDetailsBatch", matchIDs)
	ret0, _ := ret[0].([]*models.MatchDetails)
	return ret0
}

// GetMatchDetailsBatch indicates an expected call of GetMatchDetailsBatch
func (mr *MockMatchInfoMockRecorder) GetMatchDetailsBatch(matchIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchDetailsBatch", reflect.TypeOf((*MockMatchInfo)(nil).GetMatchDetailsBatch), matchIDs)
}

// GetMatchIDsByQueue mocks base method
func (m *MockMatchInfo) GetMatchIDsByQueue(queueID models.QueueID) []*models.MatchID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchIDsByQueue", queueID)
	ret0, _ := ret[0].([]*models.MatchID)
	return ret0
}

// GetMatchIDsByQueue indicates an expected call of GetMatchIDsByQueue
func (mr *MockMatchInfoMockRecorder) GetMatchIDsByQueue(queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchIDsByQueue", reflect.TypeOf((*MockMatchInfo)(nil).GetMatchIDsByQueue), queueID)
}

// GetMatchPlayerDetails mocks base method
func (m *MockMatchInfo) GetMatchPlayerDetails(matchID int) *models.MatchDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchPlayerDetails", matchID)
	ret0, _ := ret[0].(*models.MatchDetails)
	return ret0
}

// GetMatchPlayerDetails indicates an expected call of GetMatchPlayerDetails
func (mr *MockMatchInfoMockRecorder) GetMatchPlayerDetails(matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchPlayerDetails", reflect.TypeOf((*MockMatchInfo)(nil).GetMatchPlayerDetails), matchID)
}
